import requests
import logging
from config_data.config import RAPID_API_KEY
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from database.data_base import check_possibility_of_saving, insert_movie


logger = logging.getLogger(__name__)


async def search_film_name(name_film: str, user_id: int, chat_id: int, bot, page_number: int = 1):
    url = f"https://api.kinopoisk.dev/v1.4/movie/search?page={page_number}&limit=1&query={name_film}"

    headers = {
        "accept": "application/json",
        "X-API-KEY": RAPID_API_KEY
    }

    try:
        response = requests.get(url, headers=headers)
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ API: {url}")

        if response.status_code == 200:
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç API: {response.status_code}")
            data = response.json()
            found_movies = False
            result = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

            for movie in data["docs"]:

                movie_name = movie.get('name')
                if not movie_name:  # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å–º
                    continue

                found_movies = True

                movie_year = movie.get('year')
                year_info = f'({movie_year})' if movie_year else ''

                rating_kp = movie.get("rating", {}).get("kp")
                rating_kp = float(rating_kp) if rating_kp else "–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏ üõë"

                rating_kp_display = (
                    round(rating_kp, 2) if isinstance(rating_kp, float) else rating_kp
                )

                description = movie.get('description')
                description_info = f'üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n' if description\
                    else 'üìù –û–ø–∏—Å–∞–Ω–∏–µ –≥–¥–µ-—Ç–æ –≥—É–ª—è–µ—Ç, –Ω–µ –º–æ–∂–µ–º –æ—Ç—ã—Å–∫–∞—Ç—å üòî\n'

                movie_length = movie.get('movieLength')
                length_info = f'‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {movie_length} –º–∏–Ω\n' if movie_length else ''

                age_rating = movie.get('ageRating')
                rating_info = f'üÖ∞Ô∏è –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {age_rating}+\n' if age_rating else ''

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∂–∞–Ω—Ä—ã
                genres = movie.get('genres', [])
                genre_info = f'üé≠ –ñ–∞–Ω—Ä—ã: {", ".join([genre["name"] for genre in genres])}\n' \
                    if genres else 'üé≠ –ñ–∞–Ω—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã.\n'

                # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∏–ª—å–º–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
                movie_id = movie.get('id')
                insert_movie(movie_id, movie_name)
                movie_url = f"https://www.kinopoisk.ru/film/{movie_id}/"

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
                movie_info = (
                    f'üé¨ {movie_name} {year_info}\n'
                    f'üåü –†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ü–æ–∏—Å–∫–∞: {rating_kp_display}\n'
                    f'{rating_info}'
                    f'{genre_info}'
                    f'{description_info}'
                    f'{length_info}'  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                )

                result.append(movie_info)

                if not check_possibility_of_saving(user_id, name_film, year_info.strip('()')):
                    save_button = [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ",
                                                        callback_data=f"save_{movie_id}_{year_info.strip('()')}"
                                                                      f"_{page_number}")]
                else:
                    save_button = []

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–∞
                keyboard = [
                    [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ö–∏–Ω–æ–ü–æ–∏—Å–∫", url=movie_url)],
                    [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–∏–π —Ñ–∏–ª—å–º",
                                          callback_data=f"more_n_{page_number + 1}_{movie_id}")],
                    save_button
                ]

                reply_markup = InlineKeyboardMarkup(keyboard)

                caption = '\n'.join(result)[:1024]

                poster = movie.get('poster')
                if poster and 'url' in poster and poster['url']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á 'url' –≤ 'poster'
                    poster_url = poster['url']
                    logger.info(f"–ü–æ—Å—Ç–µ—Ä –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ñ–∏–ª—å–º–∞: {movie_name}, URL: {poster_url}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    await bot.send_photo(
                        chat_id,
                        poster_url,
                        caption=caption,
                        reply_markup=reply_markup
                    )
                    result.append(poster_url)

                else:
                    logger.info(f"–ü–æ—Å—Ç–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ñ–∏–ª—å–º–∞: {movie_name}")
                    # –ï—Å–ª–∏ –ø–æ—Å—Ç–µ—Ä–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await bot.send_message(
                        chat_id,
                        text=f"–ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å—Ç–µ—Ä, –Ω–æ –æ–Ω –ø—Ä–æ–ø–∞–ª –±–µ–∑ –≤–µ—Å—Ç–∏ üò¢\n\n{caption}",
                        reply_markup=reply_markup
                    )

                result = []

            if not found_movies:
                await bot.send_message(chat_id,
                                       f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –∑–∞–ø—Ä–æ—Å—É '{name_film}' —Ñ–∏–ª—å–º–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
            return f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}"

    except Exception as e:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"


async def search_film_rating(rating: str, user_id: int, chat_id: int, bot, page_number: int = 1):

    url = f"https://api.kinopoisk.dev/v1.4/movie?page={page_number}&limit=5&selectFields=&rating.kp={rating}"

    headers = {
        "accept": "application/json",
        "X-API-KEY": RAPID_API_KEY
    }

    try:
        response = requests.get(url, headers=headers)
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ API: {url}")

        if response.status_code == 200:
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç API: {response.status_code}")
            data = response.json()
            found_movies = False
            result = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            for movie in data["docs"]:

                movie_name = movie.get('name')
                if not movie_name:
                    continue

                found_movies = True

                movie_year = movie.get('year')
                year_info = f'({movie_year})' if movie_year else ''

                rating_kp = movie.get("rating", {}).get("kp")
                rating_kp = float(rating_kp) if rating_kp else "–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏ üõë"

                rating_kp_display = (
                    round(rating_kp, 2) if isinstance(rating_kp, float) else rating_kp
                )

                description = movie.get('description')
                description_info = f'üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n' if description \
                    else 'üìù –û–ø–∏—Å–∞–Ω–∏–µ –≥–¥–µ-—Ç–æ –≥—É–ª—è–µ—Ç, –Ω–µ –º–æ–∂–µ–º –æ—Ç—ã—Å–∫–∞—Ç—å üòî\n'

                movie_length = movie.get('movieLength')
                length_info = f'‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {movie_length} –º–∏–Ω\n' if movie_length else ''

                age_rating = movie.get('ageRating')
                rating_info = f'üÖ∞Ô∏è –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {age_rating}+\n' if age_rating else ''

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∂–∞–Ω—Ä—ã
                genres = movie.get('genres', [])
                genre_info = f'üé≠ –ñ–∞–Ω—Ä—ã: {", ".join([genre["name"] for genre in genres])}\n' \
                    if genres else 'üé≠ –ñ–∞–Ω—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã.\n'

                # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∏–ª—å–º–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
                movie_id = movie.get('id')
                insert_movie(movie_id, movie_name)
                movie_url = f"https://www.kinopoisk.ru/film/{movie_id}/"

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
                movie_info = (
                    f'üé¨ {movie_name} {year_info}\n'
                    f'üåü –†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ü–æ–∏—Å–∫–∞: {rating_kp_display}\n'
                    f'{rating_info}'
                    f'{genre_info}'
                    f'{description_info}'
                    f'{length_info}'
                )

                result.append(movie_info)

                if not check_possibility_of_saving(user_id, movie_name, year_info.strip('()')):
                    save_button = [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ",
                                                        callback_data=f"save_{movie_id}_{year_info.strip('()')}"
                                                                      f"_{page_number}")]
                else:
                    save_button = []

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–∞
                keyboard = [
                    [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ö–∏–Ω–æ–ü–æ–∏—Å–∫", url=movie_url)],
                    [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–∏–π —Ñ–∏–ª—å–º",
                                          callback_data=f"more_n_{page_number + 1}_{movie_id}")],
                    save_button
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                caption = '\n'.join(result)[:1024]

                poster = movie.get('poster')
                if poster and 'url' in poster and poster['url']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á 'url' –≤ 'poster'
                    poster_url = poster['url']
                    logger.info(f'–ü–æ—Å—Ç–µ—Ä –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ñ–∏–ª—å–º–∞: {movie_name}, URL: {poster_url}')
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    await bot.send_photo(
                        chat_id,
                        poster_url,
                        caption=caption,
                        reply_markup=reply_markup
                    )

                else:
                    logger.info(f'–ü–æ—Å—Ç–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ñ–∏–ª—å–º–∞: {movie_name}')
                    # –ï—Å–ª–∏ –ø–æ—Å—Ç–µ—Ä–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await bot.send_message(
                        chat_id,
                        text=f'–ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å—Ç–µ—Ä, –Ω–æ –æ–Ω –ø—Ä–æ–ø–∞–ª –±–µ–∑ –≤–µ—Å—Ç–∏ üò¢\n\n{caption}',
                        reply_markup=reply_markup
                    )

                result = []

            if not found_movies:
                await bot.send_message(chat_id,
                                       f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É '{rating}' —Ñ–∏–ª—å–º–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
            return f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}"

    except Exception as e:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"


async def search_film_genres(genre_name: str, user_id: int, chat_id: int, bot, page_number: int = 1):

    url = (f"https://api.kinopoisk.dev/v1.4/movie?page={page_number}"
           f"&limit=5&selectFields=&genres.name={genre_name.lower()}")

    headers = {
        "accept": "application/json",
        "X-API-KEY": RAPID_API_KEY
    }

    try:
        response = requests.get(url, headers=headers)
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ API: {url}")

        if response.status_code == 200:
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç API: {response.status_code}")
            data = response.json()

            if not data.get('docs'):
                await bot.send_message(
                    chat_id,
                    f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –∑–∞–ø—Ä–æ—Å—É '{genre_name}' —Ñ–∏–ª—å–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä."
                )
                return

            found_movies = False
            logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤: {len(data['docs'])}")
            result = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            for movie in data["docs"]:

                movie_name = movie.get('name')
                if not movie_name:
                    logger.info(f"–§–∏–ª—å–º –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è: {movie}")
                    continue

                found_movies = True

                movie_year = movie.get('year')
                year_info = f'({movie_year})' if movie_year else ''

                rating_kp = movie.get("rating", {}).get("kp")
                rating_kp = float(rating_kp) if rating_kp else "–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏ üõë"

                rating_kp_display = (
                    round(rating_kp, 2) if isinstance(rating_kp, float) else rating_kp
                )

                description = movie.get('description')
                description_info = f'üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n' if description \
                    else 'üìù –û–ø–∏—Å–∞–Ω–∏–µ –≥–¥–µ-—Ç–æ –≥—É–ª—è–µ—Ç, –Ω–µ –º–æ–∂–µ–º –æ—Ç—ã—Å–∫–∞—Ç—å üòî\n'

                movie_length = movie.get('movieLength')
                length_info = f'‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {movie_length} –º–∏–Ω\n' if movie_length else ''

                age_rating = movie.get('ageRating')
                rating_info = f'üÖ∞Ô∏è –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {age_rating}+\n' if age_rating else ''

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∂–∞–Ω—Ä—ã
                genres = movie.get('genres', [])
                genre_info = f'üé≠ –ñ–∞–Ω—Ä—ã: {", ".join([genre["name"] for genre in genres])}\n' \
                    if genres else 'üé≠ –ñ–∞–Ω—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã.\n'

                # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∏–ª—å–º–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
                movie_id = movie.get('id')
                insert_movie(movie_id, movie_name)
                movie_url = f"https://www.kinopoisk.ru/film/{movie_id}/"

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
                movie_info = (
                    f'üé¨ {movie_name} {year_info}\n'
                    f'üåü –†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ü–æ–∏—Å–∫–∞: {rating_kp_display}\n'
                    f'{rating_info}'
                    f'{genre_info}'
                    f'{description_info}'
                    f'{length_info}'
                )

                result.append(movie_info)

                if not check_possibility_of_saving(user_id, movie_name, year_info.strip('()')):
                    save_button = [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ",
                                                        callback_data=f"save_{movie_id}_{year_info.strip('()')}"
                                                                      f"_{page_number}")]
                else:
                    save_button = []

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–∞
                keyboard = [
                    [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ö–∏–Ω–æ–ü–æ–∏—Å–∫", url=movie_url)],
                    [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–∏–π —Ñ–∏–ª—å–º",
                                          callback_data=f"more_n_{page_number + 1}_{movie_id}")],
                    save_button
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                caption = '\n'.join(result)[:1024]

                poster = movie.get('poster')
                if poster and 'url' in poster and poster['url']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á 'url' –≤ 'poster'
                    poster_url = poster['url']
                    logger.info(f"–ü–æ—Å—Ç–µ—Ä –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ñ–∏–ª—å–º–∞: {movie_name}, URL: {poster_url}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    await bot.send_photo(
                        chat_id,
                        poster_url,
                        caption=caption,
                        reply_markup=reply_markup
                    )

                else:
                    logger.info(f"–ü–æ—Å—Ç–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ñ–∏–ª—å–º–∞: {movie_name}")
                    # –ï—Å–ª–∏ –ø–æ—Å—Ç–µ—Ä–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await bot.send_message(
                        chat_id,
                        text=f"–ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å—Ç–µ—Ä, –Ω–æ –æ–Ω –ø—Ä–æ–ø–∞–ª –±–µ–∑ –≤–µ—Å—Ç–∏ üò¢\n\n{caption}",
                        reply_markup=reply_markup
                    )

                result = []

            if not found_movies:
                await bot.send_message(chat_id,
                                       f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –∂–∞–Ω—Ä—É '{genre_name}' —Ñ–∏–ª—å–º–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
            return f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}"

    except Exception as e:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
